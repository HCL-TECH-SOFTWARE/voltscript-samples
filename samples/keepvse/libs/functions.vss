%REM
	Copyright 2023 HCL America, Inc.
	Licensed under the Apache License, Version 2.0 (the "License"); 
	you may not use this file except in compliance with the License. 
	You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

	Unless required by applicable law or agreed to in writing, 
	software distributed under the License is distributed on an "AS IS" BASIS, 
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
	See the License for the specific language governing permissions and limitations under the License	
%END REM

Option Declare
Option Public

UseVSE "*KeepVSE"
UseVSE "*JsonVSE"

%REM
    Set these for your Domino REST API environment.
    Server_Name in format http(s)://www.myServerName.com/api/v1
%END REM
Const SERVER_NAME = ""
Const USERNAME_ENVVAR = "KEEP_USERNAME"
Const USERPASSWORD_ENVVAR = "KEEP_PASSWORD"

%REM
    Logs into a Domino REST API server, using username and password stored in environment variables.
    NOTE: Environment variables need to be set *before* starting the current bash session when running the code.
    Set the SERVER_NAME constant above.
%END REM
Function login(server as KeepServer, serverName as String, userName as String, password as String)
    server.serverURL = SERVER_NAME
    Call server.login(userName, password)
End Function

%REM
    Gets a scope by name for the current KeepServer
%END REM
Function getScope(server as KeepServer, scopeName as String) as KeepScope
    Return server.getScope(scopeName)
End Function

%REM
    Gets the first 5 view entries from a passed view for a passed scope
%END REM
Function getViewEntries(server as KeepServer, scopeName as String, viewName as String) as JsonObject
    Dim scope as KeepScope
    Dim parser as New JsonParser()
    Set scope = server.getScope(scopeName)
    Call parser.loadFromJSON(scope.getListEntries(viewName, 5))
    Return parser.getRootObject()
End Function

%REM
    Gets information about the default mode for a given Form in a given scope
%END REM
Function getDefaultMode(server as KeepServer, scopeName as String, formName as String) as JsonObject
    Dim scope as KeepScope
    Dim parser as New JsonParser()
    Dim jsonObj as New JsonObject
    Set scope = server.getScope(scopeName)
    Call parser.loadFromJson(scope.getFormInfo(formName))
    Set jsonObj = parser.getRootObject()
    ForAll mode in jsonObj.getChild("formModes").getChildren()
        If ("default" = CStr(mode.getChild("modeName").scalarValue)) Then
            Print mode.toString(True)
        End If
    End ForAll
End Function

%REM
    Creates a Customer document in the demo scope
%END REM
Function createCustomer(server as KeepServer) as KeepDocument
    Dim scope as KeepScope
    Dim jsonObj as New JsonObject
    Dim doc as KeepDocument
    Set scope = server.getScope("demo")
    Call jsonObj.insertValue("Form", "Customer")
    Call jsonObj.insertValue("Color", "Red")
    Call jsonObj.insertValue("first_name", "John")
    Call jsonObj.insertValue("last_name", "Doe")
    Call jsonObj.insertValue("gender", "Male")
    Call jsonObj.insertValue("Pet", "Cockapoo")
    Set doc = scope.createDocument(jsonObj.toString(false))
    Call doc.save("", "Customer")
    Return doc
End Function

%REM
    Takes an array of JsonObjects and creates documents with it
%END REM
Sub createCustomers(server as KeepServer, jsonObjs as Variant)
    Dim scope as KeepScope
    Dim doc as KeepDocument
    Set scope = server.getScope("demo")
    ForAll json in jsonObjs
        Set doc = scope.createDocument()
        doc.JsonValue = json.toString(false)
        Call doc.save("", "Customer")
    End ForAll
End Sub

%REM
    Gets a document from a given scope with a given UNID.
    gets it without any rich text manipulation, computing default value / input translation / 
    input validation formulas, and returning metadata
%END REM
Function getDocument(server as KeepServer, scopeName as String, unid as String) as KeepDocument
    Dim scope as KeepScope
    Dim doc as KeepDocument
    Set scope = server.getScope(scopeName)
    Set doc = scope.getDocument(unid, "html", True, True, "default")
    Return doc
End Function

%REM
    Gets Form Access Modes for a document from a given scope with a given UNID.
%END REM
Function getDocumentModes(server as KeepServer, scopeName as String, unid as String) as JsonObject
    Dim scope as KeepScope
    Dim parser as New JsonParser()
    Set scope = server.getScope(scopeName)
    Call parser.loadFromJSON(scope.getDocumentModes(unid))
    Return parser.getRootObject()
End Function

%REM
    Gets a document and updates the Color field
%END REM
Function updateDocument(server as KeepServer, scopeName as String, unid as String) as KeepDocument
    Dim parser as New JsonParser()
    Dim jsonObj as JsonObject
    Dim scope as KeepScope
    Dim doc as KeepDocument
    Set scope = server.getScope(scopeName)
    Set doc = scope.getDocument(unid)
    Call parser.loadFromJSON(doc.JsonValue)
    Set jsonObj = parser.getRootObject()
    Call jsonObj.insertValue("Color", "Red")
    doc.JsonValue = jsonObj.toString(False)
    Call doc.save("", "default")
        
    Print "Color: " & doc.getValue("Color")
    Call doc.replaceValue("Color", "Blue")
    Call doc.save("", "default")
    Print "New JSON: " & doc.JsonValue
    Return doc
End Function

%REM
    Deletes a document without retrieving it first
%END REM
Sub deleteDocumentByID(server as KeepServer, scopeName as String, unid as String)
    Dim scope as KeepScope
    Dim doc as KeepDocument
    Set scope = server.getScope(scopeName)
    Call scope.deleteDocumentByID(unid, "admin")
End Sub

%REM
    Gets a document from a given scope with a given UNID. Creates a copy, then deletes the original
%END REM
Function copyAndDeleteDocument(server as KeepServer, scopeName as String, unid as String) as KeepDocument
    Dim scope as KeepScope
    Dim doc as KeepDocument
    Dim newDoc as KeepDocument
    Set scope = server.getScope(scopeName)
    Set doc = scope.getDocument(unid, False, False)
    Set newDoc = scope.createDocument()
    newDoc.jsonValue = doc.jsonValue
    Call newDoc.save("", "default")
    Call scope.deleteDocument(doc, "admin")
    Return doc
End Function

%REM
    Gets documents for given UNIDs, returning a Variant which is an array of strings
%END REM
Function getDocuments(server as KeepServer, scopeName as String, unids() as String) as Variant
    Dim scope as KeepScope
    Dim docs as Variant
    Set scope = server.getScope(scopeName)
    docs = scope.bulkGet(unids)
    Return docs
End Function

%REM
    Builds a DQL query using JSON VSE and submits it to Domino REST API
%END REM
Function performDqlQuery(server as KeepServer, scopeName as String) as String
    Dim scope as KeepScope
    Dim query as New JsonObject
    Dim vars as New JsonObject

    Set scope = server.getScope("demo")
    Call query.insertValue("maxScanDocs", 5000)
    Call query.insertValue("maxScanEntries", 2000)
    Call query.insertValue("mode", "default")
    Call query.insertValue("noViews", False)
    Call query.insertValue("timeoutSecs", 300)
    Call query.insertValue("query", "form = 'Customer' and Color = ?Color")
    Call query.insertValue("viewRefresh", False)
    Set vars = new JsonObject()
    vars.label = "variables"
    Call vars.insertValue("Color", "Blue")
    Call query.insertObject(vars)
    Return scope.dqlQuery(query.toString(True), "execute", 5)
End Function

%REM
    Builds a DQL query using JSON VSE and submits it to Domino REST API
%END REM
Function updateDocuments(server as KeepServer, scopeName as String) as String
    Dim scope as KeepScope
    Dim replaceItems as New JsonObject()

    Set scope = server.getScope("demo")
    Call replaceItems.insertValue("Color", "Maroon")

    Return scope.bulkUpdate("form = 'Customer' and Color = 'Red'", 5000, True,_ 
        replaceItems.toString(false), "default", True)
End Function

%REM
    Creates an attachment in a field called  "RichText"
%END REM
Function addAttachment(doc as KeepDocument, filePath as String) as String
    Call doc.save("", "default")
    Return doc.createAttachment(CurDir() & "/libs/functions.vss", "RichText")
End Function