%REM
	Copyright 2023 HCL America, Inc.
	Licensed under the Apache License, Version 2.0 (the "License"); 
	you may not use this file except in compliance with the License. 
	You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

	Unless required by applicable law or agreed to in writing, 
	software distributed under the License is distributed on an "AS IS" BASIS, 
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
	See the License for the specific language governing permissions and limitations under the License	
%END REM

Option Declare
Option Public

UseVSE "*DrapiVSE"
UseVSE "*JsonVSE"

%REM
    Set these for your Domino REST API environment.
    Server_Name in format http(s)://www.myServerName.com/api/v1
%END REM
' Const SERVER_NAME = ""
' Const USERNAME = "KEEP_USERNAME"
' Const USERPASSWORD = "KEEP_PASSWORD"
Const SERVER_NAME = "https://<YOUR_KEEP_SERVER>/api/v1"
Const USERNAME = "USER_NAME"
Const USERPASSWORD = "USER_PASSWORD"


%REM
    Logs into a Domino REST API server, using username and password stored in environment variables.
    NOTE: Environment variables need to be set *before* starting the current bash session when running the code.
    Set the SERVER_NAME constant above.
%END REM
Function login(server as DrapiServer, serverName as String, userName as String, password as String)
    server.serverURL = SERVER_NAME
    Call server.login(userName, password)
End Function


%REM
    Gets a DrapiRequest for a given scope name.
    If the server is not connected, it will attempt to log in using the USERNAME and USERPASSWORD.
%END REM
Function getRequest(server as DrapiServer, scopeName as String) as DrapiRequest
    Dim request as DrapiRequest
    ' check to make sure the server is connected
    If Not server.Connected Then 
        Sleep 1
        Call server.login(USERNAME, USERPASSWORD)
    End If
    
    Set request = server.CreateRequest(scopeName)
    Return request
End Function

%REM
    Gets the first 5 view entries from a passed view for a passed scope
%END REM
Function getEntries(server as DrapiServer, scopeName as String, viewName as String) as JsonObject
    Dim request as DrapiRequest, response as DrapiResponse
    Dim entryArgs as New GetListEntriesArgs
    Dim parser as New JsonParser, jobj as JsonObject

    Set request = server.createRequest(scopeName)
    
    entryArgs.mode = "default"
    entryArgs.RichTextAs = "html"
    entryArgs.Count = 5
    Set response = request.getListEntries(viewName, entryArgs)

    If response.ResponseCode = 200 Then
        Call parser.loadFromJSON(response.ContentBody)
        Set jobj = parser.getRootObject
    End If

    return jobj
End Function

%REM
    Creates a Customer document in the given scope
%END REM
Function createCustomer(server as DrapiServer, scopeName as String) as DrapiDocument
    Dim request as DrapiRequest, cdoc as DrapiDocument
    Dim jobj as New JsonObject

    Set request = server.createRequest(scopeName)
    Call jobj.insertValue("Form", "Customer")
    Call jobj.insertValue("Color", "Red")
    Call jobj.insertValue("first_name", "John")
    Call jobj.insertValue("last_name", "Doe")
    Call jobj.insertValue("gender", "Male")
    Call jobj.insertValue("Pet", "Cockapoo")

    Set cdoc = request.createDocument(jobj.toString(False))
    If cdoc.ResponseCode = 200 Then
        ' Document created successfully
        Print "Customer created with ID: " & cdoc.UNID
    Else
        ' Handle error
        Print "Error creating customer: code: " & cdoc.ResponseCode & ", message: " & cdoc.ErrorMessage
    End If

    return cdoc
End Function

%REM
    Takes an array of JsonObjects and creates documents with it
%END REM
Sub createCustomers(server as DrapiServer, scopeName as String, docsjson as String)
    Dim request as DrapiRequest, response as DrapiResponse
 
    Set request = server.createRequest(scopeName)
    Set response = request.bulkCreateDocuments(docsjson)
    If response.ResponseCode = 200 Then
        Print "Customers created successfully."
    Else
        Print "Error creating customers: code: " & response.ResponseCode & ", message: " & response.ErrorMessage
    End If
End Sub

%REM
    Gets a document from a given scope with a given UNID.
%END REM
Function getDoc(server as DrapiServer, scopeName as String, docID as String) as DrapiDocument
    Dim request as DrapiRequest, doc as DrapiDocument

    Set request = server.createRequest(scopeName)
    Set doc = request.getDocument(docID)
    Return doc
End Function

%REM
    Gets Form Access Modes for a document from a given scope with a given UNID.
%END REM
Function getDocModes(server as DrapiServer, scopeName as String, unid as String) as JsonObject
    Dim request as DrapiRequest, response as DrapiResponse
    Dim parser as New JsonParser, jobj as JsonObject
    Set request = server.createRequest(scopeName)
    Set response = request.getDocumentModes(unid)
    If response.ResponseCode = 200 Then
        Call parser.loadFromJSON(response.ContentBody)
        Set jobj = parser.getRootObject
    End If
    return jobj
End Function

%REM 
    Get the default mode for the given form
%END REM
Function getDefaultMode(server as DrapiServer, scopeName as String, formName as String) as JsonObject
    Dim request as DrapiRequest, response as DrapiResponse
    Dim entryArgs as New GetListEntriesArgs
    Dim parser as New JsonParser, jobj as JsonObject, fobj as JsonObject, mobj as JsonObject

    Set request = server.createRequest(scopeName)
    Set response = request.getScopeInfo()
    If response.ResponseCode = 200 Then
        Call parser.loadFromJSON(response.ContentBody)
        Set jobj = parser.getRootObject
        Forall c in jobj.getChild("forms").getChildren()
            If c.getChild("formName").scalarValue = formName Then
                Set fobj = c
                Forall m in fobj.getChild("formModes").getChildren()
                    If m.getChild("modeName").scalarValue = "default" Then
                        Set mobj = m
                        Exit Forall
                    End If
                End Forall
            End If
        End Forall
    End If

    return mobj
End Function

%REM
    Gets a document and updates the Color field to "Red", then returns the updated document.
%END REM
Function updateDoc(server as DrapiServer, scopeName as String, unid as String) as DrapiDocument
    Dim request as DrapiRequest, doc as DrapiDocument
    Dim jobj as New JsonObject

    Set request = server.createRequest(scopeName)
    Call jobj.insertValue("Color", "Red")
    Set doc = request.patchDocument(unid, jobj.toString(False), "html", "default")
    Return doc
End Function

%REM
    Deletes a document without retrieving it first
%END REM
Sub deleteDocumentByUNID(server as DrapiServer, scopeName as String, unid as String)
    Dim request as DrapiRequest, response as DrapiResponse
    Set request = server.createRequest(scopeName)
    Set response = request.deleteDocument(unid, "default")
    If response.ResponseCode = 200 Then
        Print "Document with UNID " & unid & " deleted successfully."
    Else
        Print "Error deleting document: code: " & response.ResponseCode & ", message: " & response.ErrorMessage
    End If
End Sub

%REM
    Gets a document from a given scope with a given UNID. Creates a copy, then deletes the original
%END REM
Function copyAndDeleteDocument(server as DrapiServer, scopeName as String, unid as String) as DrapiDocument
    Dim request as DrapiRequest, response as DrapiResponse
    Dim doc as DrapiDocument, newdoc as DrapiDocument

    Set request = server.createRequest(scopeName)
    Set doc = request.getDocument(unid, "default")
    If doc.ResponseCode = 200 Then
        Set newdoc = request.createDocument(doc.JsonValue)
        If newdoc.ResponseCode = 200 Then
            Set response = request.deleteDocument(unid, "default")
        End If
    End If
    return newdoc
End Function

%REM
    Gets documents for given UNIDs, returning a JsonObject with the documents.
%END REM
Function getDocuments(server as DrapiServer, scopeName as String, unids() as String) as JsonObject
    Dim request as DrapiRequest, response as DrapiResponse
    Dim parser as New JsonParser, jobj as JsonObject
    Set request = server.createRequest(scopeName)
    Set response = request.bulkGetDocuments(unids, "html", "default", True)
    If response.ResponseCode = 200 Then
        Call parser.loadFromJSON(response.ContentBody)
        Set jobj = parser.getRootObject
    End If
    return jobj
End Function

%REM
    Deletes documents for given UNIDs, returning a JsonObject with the results.
%END REM
Function deleteDocuments(server as DrapiServer, scopeName as String, unids() as String) as JsonObject
    Dim request as DrapiRequest, response as DrapiResponse
    Dim parser as New JsonParser, jobj as JsonObject
    Set request = server.createRequest(scopeName)
    Set response = request.bulkDeleteDocuments(unids, "default")
    If response.ResponseCode = 200 Then
        Call parser.loadFromJSON(response.ContentBody)
        Set jobj = parser.getRootObject
    End If
    return jobj
End Function

%REM
    Builds a DQL query using JSON VSE and submits it to Domino REST API
%END REM
Function performDqlQuery(server as DrapiServer, scopeName as String) as JsonObject
    Dim request as DrapiRequest, response as DrapiResponse
    Dim parser as New JsonParser(), jsonObj as JsonObject
    Dim query as New JsonObject
    Dim vars as New JsonObject

    ' check to make suer the server is connected
    If Not server.Connected Then 
        Sleep 1
        Call server.login(USERNAME, USERPASSWORD)
    End If
    Set request = server.CreateRequest(scopeName)

    Call query.insertValue("maxScanDocs", 5000)
    Call query.insertValue("maxScanEntries", 2000)
    Call query.insertValue("mode", "default")
    Call query.insertValue("noViews", False)
    Call query.insertValue("timeoutSecs", 300)
    Call query.insertValue("query", "form = 'Customer' and Color = ?Color")
    Call query.insertValue("viewRefresh", False)
    Set vars = new JsonObject()
    vars.label = "variables"
    Call vars.insertValue("Color", "Blue")
    Call query.insertObject(vars)

    Set response = request.dqlQuery(query.toString(True), "execute", 5)
    If response.ResponseCode = 200 Then
        Call parser.loadFromJSON(response.ContentBody)
        Set jsonObj = parser.getRootObject()
        Return jsonObj
    Else
        Print "Error performing DQL query: " & response.ResponseCode & " - " & response.ErrorMessage
        Return ""
    End If
    
End Function

%REM
    Builds a DQL query using JSON VSE and submits it to Domino REST API
%END REM
Function updateDocuments(server as DrapiServer, scopeName as String) as String
    Dim request as DrapiRequest, response as DrapiResponse
    dim query as String
    Dim replaceItems as New JsonObject()

    ' check to make suer the server is connected
    If Not server.Connected Then 
        Sleep 1
        Call server.login(USERNAME, USERPASSWORD)
    End If
    Set request = server.CreateRequest(scopeName)
    
    Call replaceItems.insertValue("Color", "Maroon")
    query = "form = 'Customer' and Color = 'Red'"

    Set response = request.bulkPatchDocuments(query, replaceItems.toString(False), "html", "default", 5000, True, True)

    If response.ResponseCode = 200 Then
        Return response.ContentBody
    Else
        Print "Error updating documents: " & response.ResponseCode & " - " & response.ErrorMessage
        Return ""
    End If
End Function

%REM
    Creates an attachment in a field called  "RichText"
%END REM
Function addAttachment(doc as DrapiDocument, filePath as String) as String
    Dim request as DrapiRequest, response as DrapiResponse
    Set request = doc.ParentRequest
    If filepath = "" Then
        filePath = CurDir() & "/libs/functions.vss"
    End If
    Set response = request.createAttachment(doc.Unid, filePath, "RichText")
    If response.ResponseCode = 200 Then
        Return response.ContentBody
    Else
        Print "Error creating attachment: " & response.ResponseCode & " - " & response.ErrorMessage
        Return ""
    End If
End Function

%REM
    gets the indicated attachment from the provided document, and downloads it to the target path.
%END REM
Function getAttachment(doc as DrapiDocument, attachName as String, targetPath as String) as JsonObject
    Dim request as DrapiRequest, response as DrapiResponse
    Dim parser as New JsonParser, jobj as JsonObject
    Set request = doc.ParentRequest
    Set response = request.getAttachment(doc.UNID, attachName, targetPath)
    If response.ResponseCode = 200 Then
        Call parser.loadFromJSON(response.ContentBody)
        Set jobj = parser.getRootObject
    End If
    return jobj
End Function

%REM
    deletes the indicated attachment from the provided document.
%END REM
Function deleteAttachment(doc as DrapiDocument, attachName as String, fieldName as String) as JsonObject
    Dim request as DrapiRequest, response as DrapiResponse
    Dim parser as New JsonParser, jobj as JsonObject
    Set request = doc.ParentRequest
    Set response = request.deleteAttachment(doc.UNID, attachName, fieldName)
    If response.ResponseCode = 200 Then
        Call parser.loadFromJSON(response.ContentBody)
        Set jobj = parser.getRootObject
    End If
    return jobj
End Function

' Often you have to provide a string array of UNIDs to the DRAPI methods.
' This function will return an string array of UNIDs from the metadata (@meta/unid) of a drapi document JsonArray, 
' rather than a variant array.
Function getUNIDs(jstr as String) as Variant
    Dim jparse as New JsonParser()
    Dim jobj as JsonObject, uobj as JsonObject, unids as Variant
    Dim i as Integer

    Call jparse.loadFromJson(jstr)
    Set jobj = jparse.getRootObject
    
    Redim unids(jobj.childCount - 1) as String
    Forall child in jobj.getChildren()
        Set uobj = child.getDescendantPath("@meta/unid", "/")
        unids(i) = uobj.ScalarValue
        i += 1
    End Forall

    Return unids
End Function