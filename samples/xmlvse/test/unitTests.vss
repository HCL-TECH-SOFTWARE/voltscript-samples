%REM
	Copyright 2023 HCL America, Inc.
	Licensed under the Apache License, Version 2.0 (the "License"); 
	you may not use this file except in compliance with the License. 
	You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

	Unless required by applicable law or agreed to in writing, 
	software distributed under the License is distributed on an "AS IS" BASIS, 
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
	See the License for the specific language governing permissions and limitations under the License	
%END REM

Option Declare
Option Public

Use "../libs/VoltScriptTesting"
Use "../libs/functions"

Sub Initialize

    Dim testRunner as New TestRunner("XML VSE")
    Dim testSuite as New TestSuite("Test XML Building")
    Dim xmlObj as XMLObject
    Dim parser as XMLParser
    Dim attribArr as Variant

    Call testRunner.addTestSuite(testSuite)
    Set xmlObj = buildXML()
    attribArr = xmlObj.Attributes
    Call testSuite.describe("Test XML object has a root tag <Profile>").assertEqualsString("Profile", xmlObj.Tag(), true)
    Call testSuite.describe("Test XML object has two attributes").assertEqualsInteger(1, UBound(xmlObj.Attributes))
    Call testSuite.describe("Test first attribute Tag is 'version'").assertEqualsString("version", attribArr(0), true)
    Call testSuite.describe("Test first attribute Value is '1'").assertEqualsString("1", xmlObj.GetAttributeValue("version"), true)
    Call testSuite.describe("Test second attribute Tag is 'publish'").assertEqualsString("publish", attribArr(1), true)
    Call testSuite.describe("Test second attribute Value is '2024'").assertEqualsString("2024", xmlObj.GetAttributeValue("publish"), true)

    Set xmlObj = addChildrenXML(xmlObj)
    Call testSuite.describe("Test XML object has two children").assertEqualsInteger(2, xmlObj.childCount)
    Call testSuite.describe("Test first child Tag is 'Employee'").assertEqualsString("Employee", xmlObj.getChildren()(0).Tag, true)
    Call testSuite.describe("Test first child Value is 'John Doe'").assertEqualsString("John Doe", xmlObj.getChildValue("Employee"), true)
    Call testSuite.describe("Test second child Tag is 'Position'").assertEqualsString("Position", xmlObj.getChildren()(1).Tag, true)
    Call testSuite.describe("Test second child Value is 'Software Engineer'").assertEqualsString("Software Engineer", xmlObj.getChildValue("Position"), true)

    Set xmlObj = removeXMLElements(xmlObj)
    Call testSuite.describe("Test XML object only have one attribute left").assertEqualsInteger(0, UBound(xmlObj.Attributes))
    Call testSuite.describe("Test XML object doesnt have any child element left").assertEqualsInteger(0, xmlObj.childCount)

    Dim testSuite2 as New TestSuite("Test String Parsing")
    Call testRunner.addTestSuite(testSuite2)
    Dim goodXML as String,badXML as String

    goodXML = |<Profile version="1" publish="2024"><Employee>John Doe</Employee><Position>Software Engineer</Position></Profile>|
    badXML = |This is not XML|

    Set parser = parseXMLString(goodXML)
    Set xmlObj = parser.getRootXML()
    Call testSuite2.describe("Check good XML parsed and not empty").assertTrue(Not xmlObj.isEmpty())
    Call testSuite2.describe("Check Parsed XML root tag is <Profile>").assertEqualsString("Profile", xmlObj.Tag(), true)
    Call testSuite2.describe("Check Parsed XML has two attributes").assertEqualsInteger(1, UBound(xmlObj.Attributes))
    Call testSuite2.describe("Check Parsed XML has two children").assertEqualsInteger(2, xmlObj.childCount)
    Call testSuite2.describe("Check Parsed XML first attribute Tag is 'version'").assertEqualsString("version", attribArr(0), true)
    Call testSuite2.describe("Check Parsed XML first attribute Value is '1'").assertEqualsString("1", xmlObj.GetAttributeValue("version"), true)
    Call testSuite2.describe("Check Parsed XML second attribute Tag is 'publish'").assertEqualsString("publish", attribArr(1), true)
    Call testSuite2.describe("Check Parsed XML second attribute Value is '2024'").assertEqualsString("2024", xmlObj.GetAttributeValue("publish"), true)
    Call testSuite2.describe("Check Parsed XML first child Tag is 'Employee'").assertEqualsString("Employee", xmlObj.getChildren()(0).Tag, true)
    Call testSuite2.describe("Check Parsed XML first child Value is 'John Doe'").assertEqualsString("John Doe", xmlObj.getChildValue("Employee"), true)
    Call testSuite2.describe("Check Parsed XML second child Tag is 'Position'").assertEqualsString("Position", xmlObj.getChildren()(1).Tag, true)
    Call testSuite2.describe("Check Parsed XML second child Value is 'Software Engineer'").assertEqualsString("Software Engineer", xmlObj.getChildValue("Position"), true)
    
    Call testSuite2.describe("Test parsing bad XML")
    Try
        Set parser = parseXMLString(badXML)
        Set xmlObj = parser.getRootXML()
        Call testSuite2.addResult(False, "Successfully parsed XML as " & xmlObj.toString(false))
    Catch
        Call testSuite2.addResult(True, "")
        Call testSuite2.describe("Verify error number is 400").assertEqualsInteger(400, Err())
        Call testSuite2.describe("Validate error message is as expected").assertTrue(Error() Like "Supplied XML is not a valid XML*")
    End Try

    Dim testSuite3 as New TestSuite("Test File Parsing")
    Call testRunner.addTestSuite(testSuite3)

    Set parser = parseXMLFile("samples/profile.xml")
    Set xmlObj = parser.getRootXML()
    Call testSuite3.describe("Check good XML file parsed and not empty").assertTrue(Not xmlObj.isEmpty())
    Call testSuite3.describe("Check Parsed XML file root tag is <Profile>").assertEqualsString("Profile", xmlObj.Tag(), true)
    Call testSuite3.describe("Check Parsed XML file has two attributes").assertEqualsInteger(1, UBound(xmlObj.Attributes))
    Call testSuite3.describe("Check Parsed XML file has two children").assertEqualsInteger(2, xmlObj.childCount)
    Call testSuite3.describe("Check Parsed XML file first attribute Tag is 'version'").assertEqualsString("version", attribArr(0), true)
    Call testSuite3.describe("Check Parsed XML file first attribute Value is '1'").assertEqualsString("1", xmlObj.GetAttributeValue("version"), true)
    Call testSuite3.describe("Check Parsed XML file second attribute Tag is 'publish'").assertEqualsString("publish", attribArr(1), true)
    Call testSuite3.describe("Check Parsed XML file second attribute Value is '2024'").assertEqualsString("2024", xmlObj.GetAttributeValue("publish"), true)
    Call testSuite3.describe("Check Parsed XML file first child Tag is 'Employee'").assertEqualsString("Employee", xmlObj.getChildren()(0).Tag, true)
    Call testSuite3.describe("Check Parsed XML file first child Value is 'John Doe'").assertEqualsString("John Doe", xmlObj.getChildValue("Employee"), true)
    Call testSuite3.describe("Check Parsed XML file second child Tag is 'Position'").assertEqualsString("Position", xmlObj.getChildren()(1).Tag, true)
    Call testSuite3.describe("Check Parsed XML file second child Value is 'Software Engineer'").assertEqualsString("Software Engineer", xmlObj.getChildValue("Position"), true)
    
    Call testSuite3.describe("Test parsing bad XML file")
    Try
        Set parser = parseXMLFile("samples/invalid.xml")
        Set xmlObj = parser.getRootXML()
        Call testSuite3.addResult(False, "Successfully parsed XML file as " & xmlObj.toString(false))
    Catch
        Call testSuite3.addResult(True, "")
        Call testSuite3.describe("Verify error number is 400").assertEqualsInteger(400, Err())
        Call testSuite3.describe("Validate error message is as expected").assertTrue(Error() Like "XML file is not a valid XML")
    End Try

    Call testSuite3.describe("Test opening file not found")
    Try
        Set parser = parseXMLFile("samples/noFile.xml")
        Set xmlObj = parser.getRootXML()
        Call testSuite3.addResult(False, "Successfully parsed non-existent file")
    Catch
        Call testSuite3.addResult(True, "")
        Call testSuite3.describe("Verify error number is 404").assertEqualsInteger(404, Err())
        Call testSuite3.describe("Verify error message starts File could not be opened").assertTrue(Error() Like "File could not be opened*")
    End Try

End Sub